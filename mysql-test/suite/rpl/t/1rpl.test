
--source include/have_innodb.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--let $rpl_topology=1->2
--source include/rpl_init.inc

--connection server_1
CREATE TABLE t1 (a int PRIMARY KEY, b INT) ENGINE=InnoDB;

# Replicate create-t1 and prepare to re-start slave in optimistic mode
--sync_slave_with_master server_2
--source include/stop_slave.inc
CALL mtr.add_suppression("Slave worker thread retried transaction .* in vain, giving up");

SET @old_parallel_threads=@@GLOBAL.slave_parallel_threads;
SET @@GLOBAL.slave_parallel_threads=5;
SET @old_parallel_mode=@@GLOBAL.slave_parallel_mode;
SET @@GLOBAL.slave_parallel_mode='aggressive';
SET @old_lock_wait_timeout=@@GLOBAL.innodb_lock_wait_timeout;
SET @@GLOBAL.innodb_lock_wait_timeout=2;
SET @old_slave_transaction_retries=@@GLOBAL.slave_transaction_retries;
SET @@GLOBAL.slave_transaction_retries=1;

--echo # Spoilers on the slave side causing temporary errors
--connect (spoiler_21,127.0.0.1,root,,test,$SLAVE_MYPORT)
BEGIN;
  INSERT INTO t1 SET a=1,b=2;

--connect (spoiler_22,127.0.0.1,root,,test,$SLAVE_MYPORT)
BEGIN;
  INSERT INTO t1 SET a=2,b=2;

--echo # Master payload
--connection server_1
SET @@SESSION.GTID_SEQ_NO=1000;
INSERT INTO t1 SET a=1,b=1;
SET @@SESSION.GTID_SEQ_NO=1001;
INSERT INTO t1 SET a=2,b=1;

--echo # Start slave whose both appliers is destined to being blocked
--connection server_2

SET @old_dbug= @@GLOBAL.debug_dbug;

--source include/start_slave.inc
SET @@GLOBAL.debug_dbug="+d,rpl_parallel_simulate_wait_at_retry";

--echo # Make sure both workers are waiting at their sync points
--let $wait_condition= SELECT count(*)=2 FROM information_schema.processlist WHERE state LIKE '%debug sync point%';
--source include/wait_condition.inc

--disable_result_log
 SHOW PROCESSLIST;
--enable_result_log

--echo # Signal to the 1st to proceed after it has reached termination state
SET @@DEBUG_SYNC='now SIGNAL proceed_by_1000';

--connection spoiler_21
ROLLBACK;

--disable_result_log
 SHOW PROCESSLIST;
--enable_result_log
--let $wait_condition= SELECT count(*)=1 FROM information_schema.processlist WHERE state LIKE '%debug sync point%';
--source include/wait_condition.inc

--echo # Release the 2nd worker to proceed
--connection spoiler_22
ROLLBACK;
--connection server_2

SET @@DEBUG_SYNC='now SIGNAL proceed_by_1001';

--echo # observe how it all ends

--echo # Wait for the workers to go home and check the result of applying
--let $wait_condition=SELECT count(*) = 0 FROM information_schema.processlist WHERE command = 'Slave_worker'
--source include/wait_condition.inc

if (`SELECT count(*) = 1 FROM t1 WHERE a = 1`)
{
  --echo "*** Unexpected commit by the first Worker ***"
  SELECT * from t1;
  --die
}

if (`SELECT count(*) = 1 FROM t1 WHERE a = 2`)
{
  --echo
  --echo "*** Error: congrats, you hit MDEV-12746 issue. ***"
  --echo
  --die
}
--echo # which is OK

#
# Clean up
#
--connection server_2
--source include/stop_slave.inc
SET @@GLOBAL.slave_parallel_threads=@old_parallel_threads;
SET @@GLOBAL.slave_parallel_mode=@old_parallel_mode;
SET @@GLOBAL.innodb_lock_wait_timeout=@old_lock_wait_timeout;
SET @@GLOBAL.slave_transaction_retries=@old_slave_transaction_retries;
SET @@GLOBAL.debug_dbug=@old_dbug;
SET debug_sync='RESET';
--source include/start_slave.inc

--connection server_1
DROP TABLE t1;

--sync_slave_with_master server_2

--source include/rpl_end.inc
